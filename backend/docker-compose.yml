version: '3'
name: offline_project

volumes:
  keycloak_postgres_volume:

networks:
  local_network:
    driver: bridge

services:
  gateway:
    container_name: gateway
    image: nginx:1.23.3-alpine
    volumes:
      - ./gateway/gateway.conf:/etc/nginx/nginx.conf
    networks:
      local_network:         
        aliases:
          - gateway.localtest.me
    ports:
      - "80:80"

  gateway2:
    container_name: gateway2
    image: nginx:1.23.3-alpine
    volumes:
      - ./gateway/gateway2.conf:/etc/nginx/nginx.conf
    networks:
      - local_network

  gateway3:
    container_name: gateway3
    image: nginx:1.23.3-alpine
    volumes:
      - ./gateway/gateway3.conf:/etc/nginx/nginx.conf
    networks:
      - local_network





  # oauth2proxy:
  #   container_name: oauth2proxy
  #   image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.1
  #   env_file: oauth2proxy/.env
  #   volumes:
  #     - ./oauth2proxy/oauth2proxy.cfg:/oauth2proxy.cfg
  #   command: --config /oauth2proxy.cfg
  #   networks:
  #     local_network:         
  #       aliases:
  #         - oauth2proxy.localtest.me
  #   ports:
  #     - "4180:4180"
  #   depends_on:
  #     - keycloak

  # keycloak:
  #   container_name: keycloak
  #   image: keycloak/keycloak
  #   command: start-dev --import-realm
  #   env_file: keycloak/.env
  #   volumes:
  #     - ./keycloak/realm:/opt/keycloak/data/import
  #   networks:
  #     local_network:
  #       aliases:
  #         - keycloak.localtest.me
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     keycloak_postgres:
  #       condition: service_healthy 
  #   healthcheck:
  #     test: curl http://keycloak.localtest.me:8080/health/live
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 5s

  # keycloak_postgres:
  #   container_name: keycloak_postgres
  #   image: postgres:14.10-bullseye
  #   command: postgres -c 'max_connections=200'
  #   volumes:
  #     - keycloak_postgres_volume:/var/lib/postgresql/data
  #   env_file: keycloak_postgres/.env
  #   networks: 
  #     - local_network
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: pg_isready -d postgres
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 5s

  # chats_service:
  #   container_name: chats_service
  #   build:
  #     context: .
  #     dockerfile: chats_service/Dockerfile
  #   environment:
  #     - ENTRYPOINT_ADDRESS=
  #     - ENTRYPOINT_PORT=80
  #   networks:
  #     - local_network

